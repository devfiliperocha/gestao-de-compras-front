/* eslint-disable react-hooks/exhaustive-deps */
import { createContext, useContext, useEffect, useState } from 'react'
import { {{pascalCase name}}FormErrors, {{pascalCase name}}Props } from '../types/{{lowerCase name}}s'
import { create{{pascalCase name}}, get{{pascalCase name}}s } from '../service/{{lowerCase name}}s'
import { AppContext } from 'contexts/app'

export type {{pascalCase name}}sContextProps = {
  {{lowerCase name}}s: {{pascalCase name}}Props[]
  isLoading?: boolean
  hasError?: boolean
  errorMsg?: string
  set{{pascalCase name}}s: ({{lowerCase name}}s: {{pascalCase name}}Props[]) => void
  setError?: (errorMsg: string | undefined) => void
  create: () => void
  new{{pascalCase name}}: Partial<{{pascalCase name}}Props>
  setFormData: ({{lowerCase name}}: Partial<{{pascalCase name}}Props>) => void
  errors: {{pascalCase name}}FormErrors | undefined
  clearErrors: () => void
}
export const {{pascalCase name}}sContext = createContext({} as {{pascalCase name}}sContextProps)

export const {{pascalCase name}}sContextProvider: React.FC = ({ children }) => {
  const {
    setContainerLoading,
    setContainerError,
    setGlobalMessage,
    setGlobalLoading
  } = useContext(AppContext)
  const [{{lowerCase name}}sData, set{{pascalCase name}}sData] = useState([] as {{pascalCase name}}Props[])
  const [errors, setErrors] = useState({} as {{pascalCase name}}sContextProps['errors'])
  const [new{{pascalCase name}}Data, setNew{{pascalCase name}}Data] = useState<
    {{pascalCase name}}sContextProps['new{{pascalCase name}}']
  >({})

  const set{{pascalCase name}}s = (data: {{pascalCase name}}Props[]) => {
    set{{pascalCase name}}sData(data)
  }
  const getData = async () => {
    setContainerLoading(true)
    const {{lowerCase name}}s = await get{{pascalCase name}}s()
    if ({{lowerCase name}}s.success) {
      set{{pascalCase name}}s({{lowerCase name}}s.data as {{pascalCase name}}Props[])
    } else {
      if (typeof {{lowerCase name}}s.error === 'string') {
        setContainerError({{lowerCase name}}s.error)
      } else {
        setContainerError('Erro ao carregar registros!')
        setErrors({{lowerCase name}}s.error as {{pascalCase name}}FormErrors)
      }
    }
    setContainerLoading(false)
  }

  const setFormData = ({{lowerCase name}}: {{pascalCase name}}sContextProps['new{{pascalCase name}}']) => {
    setNew{{pascalCase name}}Data({{lowerCase name}})
  }

  const create = async () => {
    setGlobalLoading(true)
    const create = await create{{pascalCase name}}(new{{pascalCase name}}Data)
    if (create.success) {
      await getData()
    } else {
      if (typeof create.error === 'string') {
        setGlobalMessage({ type: 'error', text: create.error })
      } else {
        setGlobalMessage({ type: 'error', text: 'Erro ao criar registros!' })
        setErrors(create.error as {{pascalCase name}}FormErrors)
      }
    }
    setGlobalLoading(false)
  }

  useEffect(() => {
    getData()
  }, [])

  return (
    <{{pascalCase name}}sContext.Provider
      value={ {
        {{lowerCase name}}s: {{lowerCase name}}sData,
        set{{pascalCase name}}s,
        new{{pascalCase name}}: new{{pascalCase name}}Data,
        setFormData,
        create,
        errors,
        clearErrors: () => setErrors(undefined)
      } }
    >
      {children}
    </{{pascalCase name}}sContext.Provider>
  )
}
