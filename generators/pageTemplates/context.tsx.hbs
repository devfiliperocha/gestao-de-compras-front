/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable @typescript-eslint/no-non-null-assertion */
import { createContext, useContext, useEffect, useState } from 'react'
import { {{pascalCase name}}FormErrors, {{pascalCase name}}Props } from '../types/{{lowerCase name}}s'
import { get{{pascalCase name}}, update{{pascalCase name}}, delete{{pascalCase name}} } from '../service/{{lowerCase name}}s'
import { useRouter } from 'next/dist/client/router'
import { AppContext } from 'contexts/app'

type {{pascalCase name}}ContextProps = {
  {{lowerCase name}}: Partial<{{pascalCase name}}Props>
  setFormData: ({{lowerCase name}}: Partial<{{pascalCase name}}Props>) => void
  update: () => void
  remove: () => void
  errors: {{pascalCase name}}FormErrors | undefined
}

export const {{pascalCase name}}Context = createContext({} as {{pascalCase name}}ContextProps)

export const {{pascalCase name}}ContextProvider: React.FC = ({ children }) => {
  const { setContainerLoading, setContainerError, setGlobalMessage } =
    useContext(AppContext)
  const [{{lowerCase name}}Data, set{{pascalCase name}}Data] = useState({} as {{pascalCase name}}ContextProps['{{lowerCase name}}'])
  const [errors, setErrors] = useState({} as {{pascalCase name}}ContextProps['errors'])
  const router = useRouter()
  const { id } = router.query

  const setFormData = ({{lowerCase name}}: {{pascalCase name}}ContextProps['{{lowerCase name}}']) => {
    set{{pascalCase name}}Data({{lowerCase name}})
  }

  const update = async () => {
    const {{lowerCase name}}Id = typeof id === 'string' ? parseInt(id) : 0
    setContainerLoading(true)
    const save = await update{{pascalCase name}}({{lowerCase name}}Data, {{lowerCase name}}Id)
    if (save.success) {
      await getData({{lowerCase name}}Id)
    } else {
      if (typeof save.error === 'string') {
        setGlobalMessage({ type: 'error', text: save.error })
      } else {
        setGlobalMessage({ type: 'error', text: 'Erro ao atualizar registro!' })
        setErrors(save.error as {{pascalCase name}}FormErrors)
      }
    }
    setContainerLoading(false)
  }

  const remove = async () => {
    const {{lowerCase name}}Id = typeof id === 'string' ? parseInt(id) : 0
    setContainerLoading(true)
    const remove = await delete{{pascalCase name}}({{lowerCase name}}Id)
    if (remove.success) {
      router.push('/{{lowerCase name}}')
    } else {
      if (typeof remove.error === 'string') {
        setGlobalMessage({ type: 'error', text: remove.error })
      } else {
        setGlobalMessage({ type: 'error', text: 'Erro ao remover registro!' })
        setErrors(remove.error as {{pascalCase name}}FormErrors)
      }
    }
    setContainerLoading(false)
  }

  const set{{pascalCase name}} = (data: {{pascalCase name}}ContextProps['{{lowerCase name}}']) => {
    set{{pascalCase name}}Data(data)
  }
  const getData = async (id: number) => {
    setContainerLoading(true)
    const {{lowerCase name}} = await get{{pascalCase name}}(id)
    if ({{lowerCase name}}.success) {
      set{{pascalCase name}}({{lowerCase name}}.data as {{pascalCase name}}Props)
    } else {
      if (typeof {{lowerCase name}}.error === 'string') {
        setContainerError({{lowerCase name}}.error)
      } else {
        setContainerError('Erro ao carregar registros!')
        setErrors({{lowerCase name}}.error as {{pascalCase name}}FormErrors)
      }
    }
    setContainerLoading(false)
  }

  useEffect(() => {
    const {{lowerCase name}}Id = typeof id === 'string' ? parseInt(id) : 0
    if ({{lowerCase name}}Id > 0) {
      getData({{lowerCase name}}Id)
    }
  }, [id])

  return (
    <{{pascalCase name}}Context.Provider
      value={ {
        {{lowerCase name}}: {{lowerCase name}}Data,
        setFormData,
        update,
        remove,
        errors
      } }
    >
      {children}
    </{{pascalCase name}}Context.Provider>
  )
}
